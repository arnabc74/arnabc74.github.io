@{<NOTE>
<HEAD1>Learning J</HEAD1>
<HEAD2>Monads and dyads</HEAD2>
In the last page we learned about some nice things to expect from
J. Now, nothing comes without a price. A language needs to
restrict the freedom of a programmer in various ways to make the
good things possible. We have already seen one such restriction
in the last page: the output shape of a function must depend on
only the input shape. Here is the next one: a function can have
either one or two arguments. These are called,
respectively, <RED>monad</RED>s and <RED>dyad</RED>s. Just as a
monad has a rank, a dyad has two, one for each of its
arguments. If <M>f(x,y)</M> is such a function with
ranks <M>m</M> and <M>n,</M> then <M>f</M> expects <M>x</M> to be
in <M>T_m</M> and <M>y</M> to be in <M>T_n.</M> If we try to
evaluate <M>f(x,y)</M> where <M>x\in T_{m+\ell}</M> and <M>y\in
T_{n+\ell}</M>, and the uper <M>\ell</M> levels of <M>x</M>
and <M>y</M> have the same shape, then <M>\ell</M>-many implicit nested loops are
launched. 

<P/>
Since functions are either monads or dyads, so they are much like
unary and binary operations that we learn in school. Indeed, J
uses exactly the same syntax. Thus, instead of
writing <M>f(x,y)</M> we write <CODE>x f
y</CODE>. Similarly, <M>f(x)</M> is <CODE>f x</CODE>. In
arithmetic, we have two types of minuses, unary and binary, much
to the confusion of kids. J
keeps up the tradition (both of arithmentic and of confusion) by allowing a same symbol to denote a
monad as well as dyad. Usually, the monad and the dyad denoted by
the same symbol are related, though this is not a requirement. 

<HEAD2>Right-to-left</HEAD2>

With all functions being written as binary and unary operators,
it is no waonder that J has large number of these. So to keep the
order of evaluation unambiguous we need to either put lots of
parentheses or we need to have some convention like precedence
and associativity. Even with as few operations as just +, -, *
and /, kids find it difficult to remember rules like
multiplication needs to be done before addition. You can imagine
how much more confusing it is going to be with many more
operators. Well, J has solved the problem by doing away with
precedence altogether. The J dictum is "always proceed from right
to left". Before you start to suspect some arabic connection of
J, and wonder about why we should proceed in this "reverse" way,
let me point out that this is how we do it in math most of the
time. 

<HEAD2>Cryptic symbols</HEAD2>
J justly prides itself on smart ways of combining existing
operation to produce new ones. This is much like the way modern
man writes numbers as opposed to ancient Romans. Ancient Romans
assigned symbols more or less arbitrily to whatever number they
needed, like I, V, X and C. But modern man has a systematic
approach using a radix and expressing everything by combining
powers of 10. If you want to express a hundred, the ancient Roman
just used a letter C, while modern man would first express the
number as square of 10, and notice that it is 
<D>
<BLUE>1</BLUE>\times 10^2 + <BLUE>0</BLUE> \times 10^1 + <BLUE>0</BLUE>\times 10^0.
</D>
The ancient Roman must have thought us crazy that we need so much
math to just express a number. But of course we know the
advantage. However, even we would be driven crazy if we have to
write the above expression in full everyime we need to express
a hundred. So we need an abbreviation: we have (arbitrary)
symbols for all the possible coefficients (0,1,2,...,9) and then
simply list the coefficients side by side. Is it really simple?
Yes, when you see that even a kid can do it. No, when we remember
that it took centuries for this system to evolve. 

<P/>
Well, that is basically what happens for J also. J has a clever way of
expressing many things by combining some basic objects. Arbitrary
names of assigned to only the basic entities, and all other
derived entities are expressed in their terms.  Without
abbreviations, however, this would not be of much practical
value. So J uses very short names for its basic functions (at
most two characters).

<HEAD2>First taste of J</HEAD2>
Now let us look at a simple example in the light of what we have
learnt so far. In this example we shall give a taste of all the
features we have talked about so far. We start with an array of
numbers 1,3,4,5,10. J will consider this as a tree of depth 1. 
<CIMG web="tree1.png"></CIMG>
<J>
x=: 1 3 4 5 10
</J>
To find the number of highest level branches J provides a monad
called <C>#</C>. Let's put it to use:
<J>
# x
</J>
J responds with 5. Notice how I described <C>#</C> in terms of
the input tree, and not as "a function to find the length of a
list".
<P/>
Next, we shall see the arithmetic operations in J. The operations
for addition, subtraction and multiplication are usual. But J
uses <C>%</C> for division. All operations are done using floating
points (more on this later).

<P/>
The expression
<J>
3 * 4 - 10 % 5
</J>
is interpreted as 
<D>
3\times (4 - (10 \div 5)).
</D>
Amuse yourself by trying to guess the result of 
<J>
5 - 1 - 1 - 1 - 1 - 1
</J>

</NOTE>@}
