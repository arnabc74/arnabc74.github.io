/* The following code was generated by JFlex 1.4 on 27/4/13 8:45 AM */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 27/4/13 8:45 AM from the specification file
 * <tt>jbeng.flex</tt>
 */
class BengLex implements Common {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int TEX2 = 2;
  public static final int YYINITIAL = 0;
  public static final int TEX1 = 1;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  5,  0,  0,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 16,  0,  0,  0,  0,  0, 18, 13, 14,  0, 29,  9, 12, 10,  0, 
    19, 20, 21, 22, 23, 24, 25, 26, 27, 28,  0, 11, 66,  0,  7, 15, 
     2, 33,  0,  0, 49,  0,  0,  0, 65, 35,  0,  0,  0,  0, 47, 40, 
     0,  0, 63, 61, 48, 37,  0,  0,  0, 64,  0,  0,  8,  0,  0,  0, 
    17, 31, 55, 45, 51, 39, 54, 44, 43, 34, 46, 42, 59, 58, 52, 32, 
    53,  0, 38, 60, 50, 36, 57, 56, 62, 41,  0,  4,  0,  3, 30,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\2\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\1\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\2\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\2\72\1\73\1\74"+
    "\1\75\1\3\1\76\1\0\1\77\1\0\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\2\0\1\106\1\0\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\311\0\u010c\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\u025b\0\311\0\u029e\0\u02e1\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\311\0\311\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\311\0\311\0\311\0\u0324"+
    "\0\311\0\311\0\311\0\311\0\311\0\311\0\u0367\0\311"+
    "\0\u03aa\0\u03ed\0\311\0\u0430\0\u0473\0\u04b6\0\311\0\u04f9"+
    "\0\u053c\0\u057f\0\u05c2\0\311\0\u0605\0\311\0\u0648\0\311"+
    "\0\311\0\311\0\311\0\u068b\0\311\0\311\0\u06ce\0\311"+
    "\0\311\0\311\0\u0711\0\u0754\0\311\0\311\0\311\0\311"+
    "\0\u0797\0\311\0\u07da\0\311\0\311\0\311\0\311\0\311"+
    "\0\311\0\u081d\0\u0860\0\311\0\u08a3\0\311\0\311\0\u08e6"+
    "\0\311\0\311\0\311\0\311\0\311\0\311\0\311\0\311"+
    "\0\311\0\311\0\311\0\311";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\2\4\1\7\1\10\1\4\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\41"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\4\1\101\2\102\1\103\100\102\7\104\1\105\73\104"+
    "\107\0\1\106\104\0\1\107\101\0\1\107\105\0\1\110"+
    "\27\0\1\111\16\0\1\112\4\0\1\113\102\0\1\114"+
    "\71\0\1\115\6\0\1\116\1\0\1\117\14\0\1\120"+
    "\15\0\1\121\152\0\1\122\55\0\1\42\111\0\1\123"+
    "\105\0\1\124\103\0\1\125\1\126\102\0\1\127\102\0"+
    "\1\130\102\0\1\131\102\0\1\132\102\0\1\133\102\0"+
    "\1\134\102\0\1\135\102\0\1\66\102\0\1\71\102\0"+
    "\1\136\102\0\1\137\32\0\1\105\1\4\76\0\7\104"+
    "\1\0\73\104\42\0\1\140\1\0\1\141\112\0\1\142"+
    "\44\0\1\114\126\0\1\143\113\0\1\76\102\0\1\144"+
    "\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2345];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\6\1\1\11\2\1\21\11\1\1\6\11"+
    "\1\1\1\11\2\1\1\11\3\1\1\11\4\1\1\11"+
    "\1\1\1\11\1\1\4\11\1\1\2\11\1\1\3\11"+
    "\2\1\4\11\1\0\1\11\1\0\6\11\2\0\1\11"+
    "\1\0\2\11\1\1\14\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  int yylval;
  boolean start=true;

  void sh() {/*System.err.print(yytext());*/}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BengLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  BengLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException, BadInputException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 67: 
          { start = false; sh(); return new Symbol(ANUSWAR, MISC, yytext());
          }
        case 86: break;
        case 72: 
          { start = false; sh(); return new Symbol(GH, BYAN , yytext());
          }
        case 87: break;
        case 20: 
          { sh(); return new Symbol(CHHAY, NUM, yytext());
          }
        case 88: break;
        case 23: 
          { sh(); return new Symbol(NAY, NUM, yytext());
          }
        case 89: break;
        case 13: 
          { sh(); return new Symbol(RQUO, PUNCT, yytext());
          }
        case 90: break;
        case 61: 
          { yybegin(TEX1); sh(); return new Symbol(SOT, yytext());
          }
        case 91: break;
        case 22: 
          { sh(); return new Symbol(AT, NUM, yytext());
          }
        case 92: break;
        case 69: 
          { start = true;sh(); return new Symbol(DASH, PUNCT, yytext());
          }
        case 93: break;
        case 10: 
          { start = true;sh(); return new Symbol(QN, PUNCT, yytext());
          }
        case 94: break;
        case 53: 
          { start = false; sh(); return new Symbol(SS,  BYAN, yytext());
          }
        case 95: break;
        case 65: 
          { start = false; sh(); return new Symbol(HAS, SWAR, yytext());
          }
        case 96: break;
        case 1: 
          { throw new BadInputException(yytext(),yyline,yycolumn);
          }
        case 97: break;
        case 21: 
          { sh(); return new Symbol(SAT, NUM, yytext());
          }
        case 98: break;
        case 11: 
          { start = true;sh(); return new Symbol(EXCLAM, PUNCT, yytext());
          }
        case 99: break;
        case 9: 
          { start = true;sh(); return new Symbol(RPAR, PUNCT, yytext());
          }
        case 100: break;
        case 66: 
          { start = false; sh(); return new Symbol(KHANDATA, BYAN, yytext());
          }
        case 101: break;
        case 17: 
          { sh(); return new Symbol(TIN, NUM, yytext());
          }
        case 102: break;
        case 57: 
          { yybegin(TEX2); sh(); return new Symbol(SOT, yytext());
          }
        case 103: break;
        case 58: 
          { sh(); return new Symbol(SPL,yytext());
          }
        case 104: break;
        case 27: 
          { start = false; sh(); return new Symbol(O, SWAR, yytext());
          }
        case 105: break;
        case 14: 
          { sh(); return new Symbol(SHUNYA, NUM, yytext());
          }
        case 106: break;
        case 68: 
          { start = false; sh(); return new Symbol(BISARGA, MISC, yytext());
          }
        case 107: break;
        case 64: 
          { start = false; sh(); return new Symbol(CHANDRABINDU, CHANDRABINDU, yytext());
          }
        case 108: break;
        case 2: 
          { start = true;sh(); return new Symbol(WS, PUNCT, yytext());
          }
        case 109: break;
        case 47: 
          { start = false; sh(); return new Symbol(PH, BYAN , yytext());
          }
        case 110: break;
        case 35: 
          { if(start) {
      start = false; 
      sh(); return new Symbol(Y, BYAN, yytext());
    }
    else {
      start = false;  
      sh(); return new Symbol(YY,BYAN,yytext());
    }
          }
        case 111: break;
        case 60: 
          { yybegin(YYINITIAL); sh(); return new Symbol(EOT, yytext());
          }
        case 112: break;
        case 75: 
          { start = false; sh(); return new Symbol(TTH,  BYAN, yytext());
          }
        case 113: break;
        case 4: 
          { start = true;sh(); return new Symbol(COMMA, PUNCT, yytext());
          }
        case 114: break;
        case 16: 
          { sh(); return new Symbol(DUI, NUM, yytext());
          }
        case 115: break;
        case 54: 
          { start = false; sh(); return new Symbol(X,  BYAN, yytext());
          }
        case 116: break;
        case 79: 
          { start = false; sh(); return new Symbol(SH, BYAN , yytext());
          }
        case 117: break;
        case 46: 
          { start = false; sh(); return new Symbol(P,  BYAN, yytext());
          }
        case 118: break;
        case 5: 
          { start = true;sh(); return new Symbol(DNARI, PUNCT, yytext());
          }
        case 119: break;
        case 52: 
          { start = false; sh(); return new Symbol(S,  BYAN, yytext());
          }
        case 120: break;
        case 49: 
          { start = false; sh(); return new Symbol(BH, BYAN , yytext());
          }
        case 121: break;
        case 84: 
          { start = false; sh(); return new Symbol(RRI, SWAR, yytext());
          }
        case 122: break;
        case 36: 
          { start = false; sh(); return new Symbol(K,  BYAN, yytext());
          }
        case 123: break;
        case 32: 
          { start = false; sh(); return new Symbol(UU, SWAR, yytext());
          }
        case 124: break;
        case 70: 
          { start = false; sh(); return new Symbol(AYA, SWAR, yytext());
          }
        case 125: break;
        case 45: 
          { start = false; sh(); return new Symbol(N,  BYAN, yytext());
          }
        case 126: break;
        case 80: 
          { start = false; sh(); return new Symbol(DHR,  BYAN, yytext());
          }
        case 127: break;
        case 71: 
          { start = false; sh(); return new Symbol(KH,  BYAN, yytext());
          }
        case 128: break;
        case 39: 
          { start = false; sh(); return new Symbol(J,  BYAN, yytext());
          }
        case 129: break;
        case 55: 
          { start = false; sh(); return new Symbol(DR,  BYAN, yytext());
          }
        case 130: break;
        case 7: 
          { start = true;sh(); return new Symbol(HYPHEN, PUNCT, yytext());
          }
        case 131: break;
        case 82: 
          { start = false; sh(); return new Symbol(OU, SWAR, yytext());
          }
        case 132: break;
        case 37: 
          { start = false; sh(); return new Symbol(H,  BYAN, yytext());
          }
        case 133: break;
        case 40: 
          { start = false; sh(); return new Symbol(NN,  BYAN, yytext());
          }
        case 134: break;
        case 19: 
          { sh(); return new Symbol(PNACH, NUM, yytext());
          }
        case 135: break;
        case 78: 
          { start = false; sh(); return new Symbol(DH,  BYAN, yytext());
          }
        case 136: break;
        case 38: 
          { start = false; sh(); return new Symbol(G,  BYAN, yytext());
          }
        case 137: break;
        case 42: 
          { start = false; sh(); return new Symbol(DD,  BYAN, yytext());
          }
        case 138: break;
        case 15: 
          { sh(); return new Symbol(EK, NUM, yytext());
          }
        case 139: break;
        case 81: 
          { start = false; sh(); return new Symbol(OI, SWAR, yytext());
          }
        case 140: break;
        case 48: 
          { start = false; sh(); return new Symbol(B,  BYAN, yytext());
          }
        case 141: break;
        case 62: 
          { start = true;sh(); return new Symbol(NEWLINE, PUNCT, yytext());
          }
        case 142: break;
        case 18: 
          { sh(); return new Symbol(CHAR, NUM, yytext());
          }
        case 143: break;
        case 12: 
          { start = true;sh(); return new Symbol(LQUO, PUNCT, yytext());
          }
        case 144: break;
        case 33: 
          { start = false; sh(); return new Symbol(R, BYAN , yytext());
          }
        case 145: break;
        case 8: 
          { start = true;sh(); return new Symbol(LPAR, PUNCT, yytext());
          }
        case 146: break;
        case 30: 
          { start = false; sh(); return new Symbol(II, SWAR, yytext());
          }
        case 147: break;
        case 41: 
          { start = false; sh(); return new Symbol(TT,  BYAN, yytext());
          }
        case 148: break;
        case 6: 
          { start = true;sh(); return new Symbol(SEMICOLON, PUNCT, yytext());
          }
        case 149: break;
        case 25: 
          { start = false; sh(); return new Symbol(TILDE, yytext());
          }
        case 150: break;
        case 50: 
          { start = false; sh(); return new Symbol(M, BYAN , yytext());
          }
        case 151: break;
        case 24: 
          { start = false; sh(); return new Symbol(PLUS, yytext());
          }
        case 152: break;
        case 29: 
          { start = false; sh(); return new Symbol(I, SWAR , yytext());
          }
        case 153: break;
        case 43: 
          { start = false; sh(); return new Symbol(T, BYAN , yytext());
          }
        case 154: break;
        case 51: 
          { start = false; sh(); return new Symbol(L, BYAN , yytext());
          }
        case 155: break;
        case 74: 
          { start = false; sh(); return new Symbol(JH,  BYAN, yytext());
          }
        case 156: break;
        case 28: 
          { start = false; sh(); return new Symbol(AA, SWAR, yytext());
          }
        case 157: break;
        case 31: 
          { start = false; sh(); return new Symbol(U1, SWAR, yytext());
          }
        case 158: break;
        case 85: 
          { start = false; sh(); return new Symbol(CHH,  BYAN, yytext());
          }
        case 159: break;
        case 3: 
          { start = true; sh(); return new Symbol(NL, PUNCT, yytext());
          }
        case 160: break;
        case 83: 
          { start = false; sh(); return new Symbol(UNGA,  BYAN, yytext());
          }
        case 161: break;
        case 76: 
          { start = false; sh(); return new Symbol(DDH,  BYAN, yytext());
          }
        case 162: break;
        case 77: 
          { start = false; sh(); return new Symbol(TH,  BYAN, yytext());
          }
        case 163: break;
        case 26: 
          { start = false; sh(); return new Symbol(A, SWAR, yytext());
          }
        case 164: break;
        case 56: 
          { if(start) {
      start = false; 
      sh(); return new Symbol(YY, BYAN, yytext());
    }
    else {
      start = false;  
      sh(); return new Symbol(Y,BYAN,yytext());
    }
          }
        case 165: break;
        case 34: 
          { start = false; sh(); return new Symbol(E, SWAR, yytext());
          }
        case 166: break;
        case 73: 
          { start = false; sh(); return new Symbol(CH,  BYAN, yytext());
          }
        case 167: break;
        case 59: 
          { sh(); return new Symbol(SPL,"<"+yytext()+">");
          }
        case 168: break;
        case 63: 
          { start = false; sh(); return new Symbol(ENA,  BYAN, yytext());
          }
        case 169: break;
        case 44: 
          { start = false; sh(); return new Symbol(D, BYAN , yytext());
          }
        case 170: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java BengLex <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        BengLex scanner = null;
        try {
          scanner = new BengLex( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
