import java.util.*;
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Date;

public class Finalise extends JFrame 
    implements KeyListener, ActionListener {
    
    private JTextArea ta;
    private BengPanel bp;
    private Threader rdr;
    private BTex staTex, dynTex;

    public Finalise() {
	super("Bangla Editor");
	Container c = getContentPane();
	bp = new BengPanel();
	c.add(bp,BorderLayout.NORTH);

	ta = new JTextArea(30,50);
        ta.addKeyListener(this);
	c.add(new JScrollPane(ta));
	JPanel sth = new JPanel();
	JButton btn = new JButton("Save...");
	sth.add(btn);
	c.add(btn,BorderLayout.SOUTH);
	btn.addActionListener(this);
	Image myIcon = getToolkit().getImage("myIcon.gif");
	setIconImage(myIcon);
	pack();
	setVisible(true);

	rdr = new Threader();
	dynTex = new BTex(rdr,bp);
	staTex = new BTex(bp);
	try{
	    staTex.display("sus+wAgatam");
	    bp.showLine();
	}catch(IOException e){}
	Thread t = new Thread(new Runnable() {
		public void run() {
		    try {
			dynTex.process();
		    }
		    catch(IOException ioe) {
			System.err.println("Process korte parchhi na!");
		    }
		}
	    });
	t.start();
    }
    private static final String mName[] = {
	"jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"
    };
    public void actionPerformed(ActionEvent ae) {
	//String comm = ae.getActionCommand();
	File f = new File("final.rb");
	try {
	    FileOutputStream fout = new FileOutputStream(f,true);
	    fout.write("@{\\input header@}\n".getBytes());
	    fout.write(ta.getText().getBytes());
	    fout.write("@{\\end{document}@}\n".getBytes());
	    fout.close();
	}
	catch(IOException ioe) {
	    System.err.println("Sorry could not write.");
	    ioe.printStackTrace();
	}
    }

    private void showThisLine() {
	bp.showLine();
	try {
	    int pos = ta.getCaret().getDot();
	    String str = ta.getText();
	    String prefix = str.substring(0,pos);
	    String suffix = str.substring(pos);
	    int pos1 = prefix.lastIndexOf('\n');
	    if(pos1 == -1) pos1 = 0;
	    int pos2 = suffix.indexOf('\n');
	    if(pos2 == -1) pos2 = suffix.length();
	    String thisLine = prefix.substring(pos1) + 
		suffix.substring(0,pos2); 
	    //System.err.println("This line  : "+thisLine);
	    staTex.display(thisLine);
	}
	catch(Exception ex) {}
	bp.showLine();
	dynTex.init();
	F1Hit = true;
    }

    private boolean F1Hit = false;

    public void keyPressed(KeyEvent ke) {

    }    

    public void keyReleased(KeyEvent ke) {
	if(ke.getKeyCode()==KeyEvent.VK_F1) {
	    showThisLine();
	}
    }    

    public void keyTyped(KeyEvent ke) {
	char c = ke.getKeyChar();
        if(c=='\n') 
	    bp.showLine();
	else {
	    if(F1Hit) {
		F1Hit = false;
		rdr.supply(getPrefix());
	    }
	    rdr.supply(c);
	}
    }

    private String getPrefix() {
	int pos = ta.getCaret().getDot();
	String str = ta.getText();
	String prefix = str.substring(0,pos);
	int pos1 = prefix.lastIndexOf('\n');
	if(pos1 == -1) pos1 = 0;
	return prefix.substring(pos1);
    }

    public static void main(String args[]) {
	Finalise mousumi = new Finalise();
	mousumi.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	mousumi.addWindowListener(new WindowListener() {
            public void windowClosed(WindowEvent arg0) {
                System.out.println("Window close event occur");
            }
            public void windowActivated(WindowEvent arg0) {
                System.out.println("Window Activated");
            }
            public void windowClosing(WindowEvent arg0) {
                System.out.println("Window Closing");
		System.exit(0);
            }
            public void windowDeactivated(WindowEvent arg0) {
                System.out.println("Window Deactivated");
            }
            public void windowDeiconified(WindowEvent arg0) {
                System.out.println("Window Deiconified");
            }
            public void windowIconified(WindowEvent arg0) {
                System.out.println("Window Iconified");
            }
            public void windowOpened(WindowEvent arg0) {
                System.out.println("Window Opened");
            }
	});
	
    }
}

class BengPanel extends JPanel
    implements Emitter {
    int p,s,v;
    String str;
    String line = "";
    boolean endOfLine = true;
    Font f;
    public BengPanel() {
	setBackground(Color.pink);
        try {
	    f = Font.createFont(Font.TRUETYPE_FONT,
				new FileInputStream("ALIPI_B1.TTF"));
	    //				new FileInputStream("MALOTI_E.TTF"));
	    f = f.deriveFont(30f);
	}
	catch(Exception ex) {}
	setPreferredSize(new Dimension(200,50));
    }

    private String left, mod1, mid, mod2, right1, right2;

    private  void emit1(int p , int s, int v) {
	boolean yaphalaPresent;


	//System.err.print("***p = "+p+" s = "+s+" v = "+v+"\n");
	left = mod1 = mid = mod2 = right1 = right2 = "";
	yaphalaPresent = false;
  
	if(v>=Common.YAPH) {
	    v -= Common.YAPH;
	    yaphalaPresent = true;
	}
	else {
	    yaphalaPresent = false;
	}
  

	switch(v) {
    
	case Common.AA_KAR : 
	    if(yaphalaPresent) {
		right1="\u00c9";
		right2="\u00a1";
	    }
	    else {
		right1="\u00a1";
	    }
	    break;
	case Common.II_KAR : 
	    right1="\u00a3";
	    if(yaphalaPresent) right2="\u00c9";
	    break;
	case Common.HAS_KAR :
	    right1="\u00da";
	    if(yaphalaPresent) right2="\u00c9";
	    break;
	case Common.O_KAR :
	    left = "\u00ad";
	    right1 = "\u00a1";
	    if(yaphalaPresent) right2="\u00c9";
	    break;
	case Common.OU_KAR :
	    left="\u00ad";
	    if(yaphalaPresent) {
		right1="\u00c9";
		right2="ou";
	    }
	    else {
		right1="\u00b1";
	    }
	    break;
	case Common.OI_KAR :
	    left="\u00af";
	    if(yaphalaPresent) right1="\u00c9";
	    break;
	case Common.E_KAR :
	    left="\u00ad";
	    if(yaphalaPresent) right1="\u00c9";
	    break;
	case Common.I_KAR :
	    left="\u00a2";
	    if(yaphalaPresent) right1="\u00c9";
	    break;
	case Common.U1_KAR :
	    right1="\u00a4";
	    if(yaphalaPresent) right2="\u00c9";
	    break;
	case Common.UU_KAR :
	    right1="\u00a7";
	    if(yaphalaPresent) right2="\u00c9";
	    break;
	case Common.RRI_KAR:
	    right1="\u00aa";
	    if(yaphalaPresent) right2="\u00c9";
	    break;
	case Common.A_KAR:
	    if(yaphalaPresent) right1="\u00c9";
	    break;
    
	default :
	    System.err.println("Unknown vowel sign: "+v+"\n");
	}

	primSec(p,s);
	hasYaphala = false;
    }
    boolean hasYaphala;
    private  void primSec(int p, int s) {
	switch(s) {
	case Common.RAPHALA:
	    if(!raphAbsorbed(p)) {
		mid=BHaraph.axar[p];
		mod2="\u00cc";
	    }
	    break;
	case Common.REF:
	    mod1="\u00d1";
	    mid=BHaraph.axar[p];
	    break;
	case Common.CHANDRA:
	    mid=BHaraph.axar[p];
	    mod2="y";
	    break;
	case Common.REF_RAPHALA:
	    mod1="\u00d1";
	    if(!raphAbsorbed(p)) {
		mid=BHaraph.axar[p];
		mod2="\u00cc";
	    }
	    break;
	case Common.REF_CHANDRA:
	    mod1="\u00d1";
	    mod2="y";
	    break;
	case Common.NOTHING:
            //System.err.println("p======"+p+", axar = ");
	    mid=BHaraph.axar[p];
	    break;
	}
    }

    boolean raphAbsorbed(int p) {
	switch(p) {
	case Common.K :
	    mid=new String(new byte[]{(byte)0x9c,(byte)0xb2});	   
	    return true;
	case Common.T :
	    mid=new String(new byte[]{(byte)0x9c});
	    return true;
	case Common.BH :
	    mid=new String(new byte[]{(byte)0xef});	    
	    return true;
	case Common.N_T :
	    mid=new String(new byte[]{(byte)0xbf,(byte)0xbb});
	    return true;
	case Common.S_T :
	    mid=new String(new byte[]{(byte)0xd9,(byte)0xbb});
	    return true;
	case Common.S_K :
	    mid=new String(new byte[]{(byte)0xfb});
	    return true;
	}
	return false;
    }

    public void emitEng(String str) {}

    public void emit(int p, int s, int v) {
	emit1(p,s,v);

	str = left+mid+mod1+mod2+right1+right2;
	if(endOfLine) {
	    endOfLine = false;
	    line = "";
	}
	//System.err.println("\t["+str+"]");
	line += str;

	repaint();
    }

    void showLine() {
	endOfLine = true;
    }
    public void paintComponent(Graphics g) {
	super.paintComponent(g);
	Graphics2D g2 = (Graphics2D) g;
	g2.setFont(f);
	g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
			    RenderingHints.VALUE_ANTIALIAS_ON);
	g.drawString(line,5,40);
    }
}


